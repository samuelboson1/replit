{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hotel Management System\n\n## Overview\n\nThis is a full-stack hotel housekeeping management web application built with React, Express.js, and PostgreSQL. The system enables efficient management of hotel room cleaning processes, featuring role-based access for managers and housekeepers. It provides real-time tracking of room status, cleaning sessions with timer functionality, checklist management for quality control, and problem reporting capabilities. The application is designed with a mobile-first approach to accommodate housekeeping staff working throughout the hotel.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Single-page application using React 18 with TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **Wouter Routing**: Lightweight client-side routing solution\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Real-time Updates**: WebSocket connection for live room status updates across all connected clients\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with middleware for logging, error handling, and CORS\n- **WebSocket Integration**: Real-time bidirectional communication using native WebSocket API\n- **Database Layer**: Drizzle ORM with type-safe schema definitions and migrations\n- **Session Management**: PostgreSQL-based session storage with connect-pg-simple\n- **Development Tools**: Hot reload with Vite integration and TypeScript compilation\n\n### Database Design\n- **PostgreSQL with Neon**: Cloud-hosted PostgreSQL database with connection pooling\n- **Schema Structure**: \n  - Users table with role-based permissions (manager, housekeeper, supervisor)\n  - Rooms table with status tracking, floor organization, and assignment management\n  - Cleaning sessions with timer functionality and pause/resume capabilities\n  - Checklist templates and completions for quality control\n  - Problem reports with categorization and priority levels\n- **Real-time Sync**: Database changes trigger WebSocket broadcasts to maintain consistency\n\n### Authentication & Authorization\n- **Role-based Access Control**: Three user roles with different permissions and UI views\n- **Session-based Authentication**: Secure session management with PostgreSQL storage\n- **Route Protection**: Frontend and backend route guards based on user roles\n\n## External Dependencies\n\n### Core Technologies\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support\n- **Drizzle ORM**: Type-safe database toolkit with schema validation\n- **TanStack Query**: Server state management and caching library\n- **Radix UI**: Headless component primitives for accessibility\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **shadcn/ui**: Pre-built component library with consistent styling\n- **Lucide React**: Icon library for consistent iconography\n- **class-variance-authority**: Type-safe variant management for components\n\n### Development Tools\n- **Vite**: Fast build tool with hot module replacement\n- **TypeScript**: Static type checking across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Replit Integration**: Development environment plugins and runtime error handling\n\n### Real-time Communication\n- **WebSocket API**: Native WebSocket implementation for real-time updates\n- **Auto-reconnection**: Client-side connection resilience with exponential backoff\n- **Message Broadcasting**: Server-side message distribution to all connected clients","size_bytes":3758},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  try {\n    console.log(\"📝 upsertUser called with claims:\", { \n      sub: claims[\"sub\"], \n      email: claims[\"email\"], \n      first_name: claims[\"first_name\"],\n      originalRole: claims[\"role\"]\n    });\n    \n    // Determine role from claims or email patterns\n    let userRole = claims[\"role\"];\n    if (!userRole) {\n      // For development/testing ONLY, assign manager role to specific emails\n      if (process.env.NODE_ENV === \"development\" || process.env.ALLOW_DEV_ROLE_OVERRIDE === \"true\") {\n        const email = claims[\"email\"]?.toLowerCase();\n        if (email && (\n          email.includes(\"manager\") || \n          email.includes(\"admin\") || \n          email === \"manager@test.com\" ||\n          email === \"admin@hotel.com\"\n        )) {\n          userRole = \"manager\";\n        } else {\n          userRole = \"housekeeper\";\n        }\n      } else {\n        // In production, default to housekeeper unless explicitly set in OIDC claims\n        userRole = \"housekeeper\";\n      }\n    }\n\n    console.log(\"🎯 Role determined:\", userRole, \"for email:\", claims[\"email\"]);\n\n    const result = await storage.upsertUser({\n      id: claims[\"sub\"],\n      email: claims[\"email\"],\n      firstName: claims[\"first_name\"],\n      lastName: claims[\"last_name\"],\n      profileImageUrl: claims[\"profile_image_url\"],\n      role: userRole,\n    });\n    \n    console.log(\"✅ upsertUser successful:\", { id: result.id, email: result.email, role: result.role });\n    return result;\n  } catch (error) {\n    console.error(\"❌ upsertUser failed:\", error);\n    throw error;\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    \n    // Upsert user and get the actual user ID from database\n    const dbUser = await upsertUser(tokens.claims());\n    \n    // Update session to use the actual database user ID instead of original claims sub\n    const userSession = user as any;\n    if (userSession.claims) {\n      console.log(\"🔄 Updating session sub from\", userSession.claims.sub, \"to\", dbUser.id);\n      userSession.claims.sub = dbUser.id;\n    }\n    \n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\n// Role-based access control middleware\nexport const requireRole = (...allowedRoles: string[]): RequestHandler => {\n  return async (req: any, res, next) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || !allowedRoles.includes(user.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      req.currentUser = user;\n      next();\n    } catch (error) {\n      console.error(\"Error checking user role:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n};\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":6663},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, requireRole } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { insertRoomSchema, insertCleaningSessionSchema, insertChecklistCompletionSchema, insertProblemReportSchema, type WSMessage } from \"@shared/schema\";\n\n// WebSocket clients storage\nconst wsClients = new Set<WebSocket>();\n\n// Broadcast to all connected clients\nfunction broadcast(message: WSMessage) {\n  const messageStr = JSON.stringify(message);\n  wsClients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(messageStr);\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize checklist template if it doesn't exist\n  const initializeChecklistTemplate = async () => {\n    const existing = await storage.getChecklistTemplate(\"Limpeza 5 Estrelas\");\n    if (!existing) {\n      const template = {\n        name: \"Limpeza 5 Estrelas\",\n        items: {\n          \"step1\": {\n            title: \"Teste de Funcionalidade (Tudo a funcionar)\",\n            items: [\n              { id: \"lighting\", text: \"Iluminação: Ligar e desligar TODAS as luzes do quarto e banheiro.\" },\n              { id: \"shower\", text: \"Chuveiro: Ligar e testar a pressão e a temperatura da água (quente e fria).\" },\n              { id: \"ac\", text: \"Ar Condicionado: Ligar, verificar se gela e se não há vazamentos ou ruídos estranhos.\" },\n              { id: \"tv\", text: \"TV e Controlo Remoto: Ligar a TV, verificar canais e funcionamento do controlo (pilhas OK).\" },\n              { id: \"outlets\", text: \"Tomadas: Testar pelo menos duas tomadas com um carregador.\" },\n              { id: \"minibar\", text: \"Frigobar: Verificar se está a gelar e se a porta fecha corretamente.\" },\n              { id: \"toilet_flush\", text: \"Descarga: Acionar a descarga e verificar se há vazamentos.\" }\n            ]\n          },\n          \"step2\": {\n            title: \"Limpeza Profunda (Brilhando e cheiroso)\",\n            items: [\n              { id: \"ac_filters\", text: \"Filtros do Ar Condicionado: Limpos.\" },\n              { id: \"drains\", text: \"Ralos (Banheiro e Box): Limpos e desinfetados com produto anti-odor.\" },\n              { id: \"toilet\", text: \"Vaso Sanitário: Limpo por dentro e por fora, com lacre de higienização.\" },\n              { id: \"shower_box\", text: \"Box: Vidros/acrílicos transparentes, sem manchas de água ou sabão.\" },\n              { id: \"mirror\", text: \"Espelho: Limpo e sem manchas.\" },\n              { id: \"floor\", text: \"Piso: Varrido e lavado, sem cabelos ou sujidade nos cantos.\" },\n              { id: \"surfaces\", text: \"Superfícies: Móveis, bancadas e telefone limpos, sem pó.\" },\n              { id: \"closets\", text: \"Interior de Armários e Gavetas: Verificados e limpos.\" },\n              { id: \"windows\", text: \"Janelas e Cortinas: Vidros limpos e cortinas/blackout a funcionar corretamente.\" },\n              { id: \"bed\", text: \"Cama: Feita com enxoval limpo, esticado e sem manchas.\" }\n            ]\n          },\n          \"step3\": {\n            title: \"Inspeção Visual e Finalização (Aparência impecável)\",\n            items: [\n              { id: \"guest_test\", text: \"\\\"Teste do Hóspede\\\": Entrar no quarto com um novo olhar. O cheiro é agradável? A aparência é convidativa?\" },\n              { id: \"amenities\", text: \"Amenidades: Sabonetes, champô e papel higiénico repostos.\" },\n              { id: \"towels\", text: \"Toalhas: Limpas, dobradas e posicionadas corretamente.\" },\n              { id: \"organization\", text: \"Organização: Objetos (controlo, copos) alinhados e no lugar padrão.\" },\n              { id: \"minibar_stock\", text: \"Frigobar: Organizado e abastecido conforme o padrão.\" }\n            ]\n          },\n          \"step4\": {\n            title: \"Dupla Verificação (Assinatura do Supervisor)\",\n            items: [\n              { id: \"supervisor_check\", text: \"Checklist Conferido: O supervisor verificou todos os itens acima.\" }\n            ]\n          }\n        }\n      };\n      await storage.createChecklistTemplate(template);\n    }\n  };\n\n  // Initialize sample data\n  const initializeSampleData = async () => {\n    const users = await storage.getAllUsers();\n    if (users.length === 0) {\n      // Create sample users\n      await storage.createUser({ name: \"Maria Silva\", email: \"maria@hotel.com\", role: \"manager\" });\n      await storage.createUser({ name: \"Ana Costa\", email: \"ana@hotel.com\", role: \"housekeeper\" });\n      await storage.createUser({ name: \"Maria Santos\", email: \"maria.santos@hotel.com\", role: \"housekeeper\" });\n      await storage.createUser({ name: \"João Silva\", email: \"joao@hotel.com\", role: \"housekeeper\" });\n      await storage.createUser({ name: \"Carla Mendes\", email: \"carla@hotel.com\", role: \"housekeeper\" });\n      await storage.createUser({ name: \"Supervisor A\", email: \"supervisor@hotel.com\", role: \"supervisor\" });\n    }\n\n    const rooms = await storage.getAllRooms();\n    if (rooms.length === 0) {\n      const housekeepers = await storage.getAllUsers();\n      const housekeeper1 = housekeepers.find(u => u.name === \"Ana Costa\");\n      const housekeeper2 = housekeepers.find(u => u.name === \"Maria Santos\");\n      const housekeeper3 = housekeepers.find(u => u.name === \"João Silva\");\n      const housekeeper4 = housekeepers.find(u => u.name === \"Carla Mendes\");\n\n      // Create sample rooms\n      await storage.createRoom({ number: \"101\", floor: 1, type: \"standard\", status: \"dirty\", assignedTo: housekeeper1?.id, priority: \"alta\" });\n      await storage.createRoom({ number: \"102\", floor: 1, type: \"standard\", status: \"clean\", assignedTo: housekeeper1?.id });\n      await storage.createRoom({ number: \"205\", floor: 2, type: \"deluxe\", status: \"cleaning\", assignedTo: housekeeper2?.id });\n      await storage.createRoom({ number: \"206\", floor: 2, type: \"deluxe\", status: \"dirty\", assignedTo: housekeeper2?.id });\n      await storage.createRoom({ number: \"312\", floor: 3, type: \"suite\", status: \"inspection\", assignedTo: housekeeper3?.id });\n      await storage.createRoom({ number: \"408\", floor: 4, type: \"standard\", status: \"clean\", assignedTo: housekeeper4?.id });\n      await storage.createRoom({ number: \"505\", floor: 5, type: \"deluxe\", status: \"occupied\" });\n    }\n  };\n\n  await initializeChecklistTemplate();\n  await initializeSampleData();\n\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes (apply auth middleware specifically)\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log(\"🔍 /api/auth/user - req.user:\", {\n        isAuthenticated: req.isAuthenticated(),\n        hasClaims: !!req.user?.claims,\n        sub: req.user?.claims?.sub,\n        email: req.user?.claims?.email\n      });\n      \n      if (!req.user?.claims?.sub) {\n        console.log(\"❌ No claims.sub found\");\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const userId = req.user.claims.sub;\n      console.log(\"🔎 Looking for user with ID:\", userId);\n      \n      const user = await storage.getUser(userId);\n      console.log(\"📊 Database query result:\", user ? { id: user.id, email: user.email } : null);\n      \n      if (!user) {\n        console.log(\"❌ User not found in database for ID:\", userId);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Protect all API routes with authentication\n  app.use('/api', isAuthenticated);\n\n  // Rooms API with proper RBAC\n  app.get(\"/api/rooms\", async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const currentUser = await storage.getUser(userId);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      let rooms;\n      \n      // Managers can see all rooms, housekeepers only see assigned rooms\n      if (currentUser.role === \"manager\") {\n        const { assignedTo } = req.query;\n        if (assignedTo) {\n          rooms = await storage.getRoomsByAssignedUser(assignedTo as string);\n        } else {\n          rooms = await storage.getAllRooms();\n        }\n      } else {\n        // Non-managers (housekeepers, supervisors) only see their assigned rooms\n        rooms = await storage.getRoomsByAssignedUser(userId);\n      }\n      \n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.patch(\"/api/rooms/:id/status\", requireRole(\"manager\", \"supervisor\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate status against enum\n      const statusSchema = z.object({\n        status: z.enum(['dirty', 'clean', 'occupied', 'cleaning', 'inspection', 'approved'])\n      });\n      \n      const { status } = statusSchema.parse(req.body);\n      \n      const room = await storage.updateRoomStatus(id, status);\n      \n      // Broadcast room status update\n      broadcast({\n        type: 'room_status_update',\n        data: { roomId: id, status, room }\n      });\n      \n      res.json(room);\n    } catch (error) {\n      console.error(\"Error updating room status:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update room status\" });\n    }\n  });\n\n  // Cleaning sessions API\n  app.post(\"/api/cleaning-sessions\", async (req, res) => {\n    try {\n      const sessionData = insertCleaningSessionSchema.parse(req.body);\n      const session = await storage.startCleaningSession(sessionData);\n      \n      // Update room status to cleaning\n      await storage.updateRoomStatus(sessionData.roomId, 'cleaning');\n      \n      // Broadcast timer update\n      broadcast({\n        type: 'timer_update',\n        data: { action: 'start', session }\n      });\n      \n      res.json(session);\n    } catch (error) {\n      console.error(\"Error starting cleaning session:\", error);\n      res.status(500).json({ message: \"Failed to start cleaning session\" });\n    }\n  });\n\n  app.patch(\"/api/cleaning-sessions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const session = await storage.updateCleaningSession(id, updates);\n      \n      // Broadcast timer update\n      broadcast({\n        type: 'timer_update',\n        data: { action: 'update', session }\n      });\n      \n      res.json(session);\n    } catch (error) {\n      console.error(\"Error updating cleaning session:\", error);\n      res.status(500).json({ message: \"Failed to update cleaning session\" });\n    }\n  });\n\n  app.get(\"/api/cleaning-sessions/active/:roomId\", async (req, res) => {\n    try {\n      const { roomId } = req.params;\n      const session = await storage.getActiveCleaningSession(roomId);\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error fetching active cleaning session:\", error);\n      res.status(500).json({ message: \"Failed to fetch active cleaning session\" });\n    }\n  });\n\n  // Checklist API\n  app.get(\"/api/checklist-template/:name\", async (req, res) => {\n    try {\n      const { name } = req.params;\n      const template = await storage.getChecklistTemplate(name);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching checklist template:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklist template\" });\n    }\n  });\n\n  app.post(\"/api/checklist-completions\", async (req, res) => {\n    try {\n      const completionData = insertChecklistCompletionSchema.parse(req.body);\n      const completion = await storage.saveChecklistCompletion(completionData);\n      \n      // Broadcast checklist update\n      broadcast({\n        type: 'checklist_update',\n        data: { action: 'save', completion }\n      });\n      \n      res.json(completion);\n    } catch (error) {\n      console.error(\"Error saving checklist completion:\", error);\n      res.status(500).json({ message: \"Failed to save checklist completion\" });\n    }\n  });\n\n  app.patch(\"/api/checklist-completions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const completion = await storage.updateChecklistCompletion(id, updates);\n      \n      // If checklist is completed and approved, update room status\n      if (completion.isCompleted && completion.supervisorSignature) {\n        await storage.updateRoomStatus(completion.roomId, 'clean');\n      }\n      \n      // Broadcast checklist update\n      broadcast({\n        type: 'checklist_update',\n        data: { action: 'update', completion }\n      });\n      \n      res.json(completion);\n    } catch (error) {\n      console.error(\"Error updating checklist completion:\", error);\n      res.status(500).json({ message: \"Failed to update checklist completion\" });\n    }\n  });\n\n  // Get completed checklist for room (for approval)\n  app.get(\"/api/checklist-completions/room/:roomId\", requireAuth, async (req, res) => {\n    try {\n      const { roomId } = req.params;\n      const completion = await storage.getChecklistCompletionByRoom(roomId);\n      \n      if (!completion) {\n        return res.status(404).json({ message: \"No completed checklist found for this room\" });\n      }\n      \n      res.json(completion);\n    } catch (error) {\n      console.error(\"Error fetching checklist completion:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklist completion\" });\n    }\n  });\n\n  // Problem reports API\n  app.post(\"/api/problem-reports\", async (req, res) => {\n    try {\n      const reportData = insertProblemReportSchema.parse(req.body);\n      const report = await storage.createProblemReport(reportData);\n      \n      // Update room status to inspection\n      await storage.updateRoomStatus(reportData.roomId, 'inspection');\n      \n      // Broadcast problem report\n      broadcast({\n        type: 'problem_report',\n        data: { action: 'create', report }\n      });\n      \n      res.json(report);\n    } catch (error) {\n      console.error(\"Error creating problem report:\", error);\n      res.status(500).json({ message: \"Failed to create problem report\" });\n    }\n  });\n\n  app.get(\"/api/problem-reports\", async (req, res) => {\n    try {\n      const { roomId } = req.query;\n      let reports;\n      \n      if (roomId) {\n        reports = await storage.getProblemReportsByRoom(roomId as string);\n      } else {\n        reports = await storage.getAllProblemReports();\n      }\n      \n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching problem reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem reports\" });\n    }\n  });\n\n  // Users API (admin only)\n  app.get(\"/api/users\", requireRole(\"manager\"), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    wsClients.add(ws);\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n      wsClients.delete(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      wsClients.delete(ws);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":16118},"server/storage.ts":{"content":"import {\n  users,\n  rooms,\n  cleaningSessions,\n  checklistTemplates,\n  checklistCompletions,\n  problemReports,\n  type User,\n  type InsertUser,\n  type UpsertUser,\n  type Room,\n  type InsertRoom,\n  type CleaningSession,\n  type InsertCleaningSession,\n  type ChecklistTemplate,\n  type ChecklistCompletion,\n  type InsertChecklistCompletion,\n  type ProblemReport,\n  type InsertProblemReport,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Room operations\n  getAllRooms(): Promise<Room[]>;\n  getRoom(id: string): Promise<Room | undefined>;\n  getRoomsByAssignedUser(userId: string): Promise<Room[]>;\n  updateRoomStatus(roomId: string, status: string): Promise<Room>;\n  updateRoom(roomId: string, updates: Partial<Room>): Promise<Room>;\n  createRoom(room: InsertRoom): Promise<Room>;\n  \n  // Cleaning session operations\n  startCleaningSession(session: InsertCleaningSession): Promise<CleaningSession>;\n  getActiveCleaningSession(roomId: string): Promise<CleaningSession | undefined>;\n  updateCleaningSession(sessionId: string, updates: Partial<CleaningSession>): Promise<CleaningSession>;\n  \n  // Checklist operations\n  getChecklistTemplate(name: string): Promise<ChecklistTemplate | undefined>;\n  createChecklistTemplate(template: Omit<ChecklistTemplate, 'id' | 'createdAt'>): Promise<ChecklistTemplate>;\n  saveChecklistCompletion(completion: InsertChecklistCompletion): Promise<ChecklistCompletion>;\n  getChecklistCompletionByRoom(roomId: string): Promise<ChecklistCompletion | undefined>;\n  getChecklistCompletion(roomId: string, templateId: string): Promise<ChecklistCompletion | undefined>;\n  updateChecklistCompletion(completionId: string, updates: Partial<ChecklistCompletion>): Promise<ChecklistCompletion>;\n  \n  // Problem report operations\n  createProblemReport(report: InsertProblemReport): Promise<ProblemReport>;\n  getProblemReportsByRoom(roomId: string): Promise<ProblemReport[]>;\n  updateProblemReport(reportId: string, updates: Partial<ProblemReport>): Promise<ProblemReport>;\n  getAllProblemReports(): Promise<ProblemReport[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    try {\n      const [user] = await db\n        .insert(users)\n        .values(userData)\n        .onConflictDoUpdate({\n          target: users.id,\n          set: {\n            email: userData.email,\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            profileImageUrl: userData.profileImageUrl,\n            role: userData.role,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      return user;\n    } catch (error: any) {\n      // Handle unique constraint violation on email\n      if (error.message?.includes('users_email_unique')) {\n        // Find existing user by email and update\n        const existingUser = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, userData.email!))\n          .limit(1);\n        \n        if (existingUser.length > 0) {\n          const [updatedUser] = await db\n            .update(users)\n            .set({\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              profileImageUrl: userData.profileImageUrl,\n              role: userData.role,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.email, userData.email!))\n            .returning();\n          return updatedUser;\n        }\n      }\n      throw error;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.name));\n  }\n\n  // Room operations\n  async getAllRooms(): Promise<Room[]> {\n    return await db.select().from(rooms).orderBy(asc(rooms.number));\n  }\n\n  async getRoom(id: string): Promise<Room | undefined> {\n    const [room] = await db.select().from(rooms).where(eq(rooms.id, id));\n    return room;\n  }\n\n  async getRoomsByAssignedUser(userId: string): Promise<Room[]> {\n    return await db.select().from(rooms).where(eq(rooms.assignedTo, userId)).orderBy(asc(rooms.number));\n  }\n\n  async updateRoomStatus(roomId: string, status: string): Promise<Room> {\n    const [room] = await db\n      .update(rooms)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(rooms.id, roomId))\n      .returning();\n    return room;\n  }\n\n  async updateRoom(roomId: string, updates: Partial<Room>): Promise<Room> {\n    const [room] = await db\n      .update(rooms)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(rooms.id, roomId))\n      .returning();\n    return room;\n  }\n\n  async createRoom(roomData: InsertRoom): Promise<Room> {\n    const [room] = await db.insert(rooms).values(roomData).returning();\n    return room;\n  }\n\n  // Cleaning session operations\n  async startCleaningSession(sessionData: InsertCleaningSession): Promise<CleaningSession> {\n    const [session] = await db.insert(cleaningSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getActiveCleaningSession(roomId: string): Promise<CleaningSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(cleaningSessions)\n      .where(and(eq(cleaningSessions.roomId, roomId), or(eq(cleaningSessions.status, 'active'), eq(cleaningSessions.status, 'paused'))))\n      .orderBy(desc(cleaningSessions.createdAt))\n      .limit(1);\n    return session;\n  }\n\n  async updateCleaningSession(sessionId: string, updates: Partial<CleaningSession>): Promise<CleaningSession> {\n    const [session] = await db\n      .update(cleaningSessions)\n      .set(updates)\n      .where(eq(cleaningSessions.id, sessionId))\n      .returning();\n    return session;\n  }\n\n  // Checklist operations\n  async getChecklistTemplate(name: string): Promise<ChecklistTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(checklistTemplates)\n      .where(eq(checklistTemplates.name, name));\n    return template;\n  }\n\n  async createChecklistTemplate(templateData: Omit<ChecklistTemplate, 'id' | 'createdAt'>): Promise<ChecklistTemplate> {\n    const [template] = await db.insert(checklistTemplates).values(templateData).returning();\n    return template;\n  }\n\n  async saveChecklistCompletion(completionData: InsertChecklistCompletion): Promise<ChecklistCompletion> {\n    const [completion] = await db.insert(checklistCompletions).values(completionData).returning();\n    return completion;\n  }\n\n  async getChecklistCompletion(roomId: string, templateId: string): Promise<ChecklistCompletion | undefined> {\n    const [completion] = await db\n      .select()\n      .from(checklistCompletions)\n      .where(and(eq(checklistCompletions.roomId, roomId), eq(checklistCompletions.templateId, templateId)))\n      .orderBy(desc(checklistCompletions.createdAt))\n      .limit(1);\n    return completion;\n  }\n\n  async updateChecklistCompletion(completionId: string, updates: Partial<ChecklistCompletion>): Promise<ChecklistCompletion> {\n    const [completion] = await db\n      .update(checklistCompletions)\n      .set(updates)\n      .where(eq(checklistCompletions.id, completionId))\n      .returning();\n    return completion;\n  }\n\n  async getChecklistCompletionByRoom(roomId: string): Promise<ChecklistCompletion | undefined> {\n    const [completion] = await db\n      .select()\n      .from(checklistCompletions)\n      .where(and(eq(checklistCompletions.roomId, roomId), eq(checklistCompletions.isCompleted, true)))\n      .orderBy(desc(checklistCompletions.completedAt))\n      .limit(1);\n    return completion;\n  }\n\n  // Problem report operations\n  async createProblemReport(reportData: InsertProblemReport): Promise<ProblemReport> {\n    const [report] = await db.insert(problemReports).values(reportData).returning();\n    return report;\n  }\n\n  async getProblemReportsByRoom(roomId: string): Promise<ProblemReport[]> {\n    return await db\n      .select()\n      .from(problemReports)\n      .where(eq(problemReports.roomId, roomId))\n      .orderBy(desc(problemReports.createdAt));\n  }\n\n  async updateProblemReport(reportId: string, updates: Partial<ProblemReport>): Promise<ProblemReport> {\n    const [report] = await db\n      .update(problemReports)\n      .set(updates)\n      .where(eq(problemReports.id, reportId))\n      .returning();\n    return report;\n  }\n\n  async getAllProblemReports(): Promise<ProblemReport[]> {\n    return await db\n      .select()\n      .from(problemReports)\n      .orderBy(desc(problemReports.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9085},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roomStatusEnum = pgEnum('room_status', ['dirty', 'cleaning', 'inspection', 'clean', 'occupied', 'approved']);\nexport const roomTypeEnum = pgEnum('room_type', ['standard', 'deluxe', 'suite']);\nexport const userRoleEnum = pgEnum('user_role', ['manager', 'housekeeper', 'supervisor']);\nexport const priorityEnum = pgEnum('priority', ['baixa', 'media', 'alta', 'urgente']);\nexport const problemTypeEnum = pgEnum('problem_type', ['eletrico', 'hidraulico', 'ar_condicionado', 'moveis', 'eletronicos', 'limpeza_especial', 'outros']);\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table (updated for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\"), // Made nullable for compatibility\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default('housekeeper'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Rooms table\nexport const rooms = pgTable(\"rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  number: varchar(\"number\").notNull().unique(),\n  floor: integer(\"floor\").notNull(),\n  type: roomTypeEnum(\"type\").notNull().default('standard'),\n  status: roomStatusEnum(\"status\").notNull().default('dirty'),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  lastCleaned: timestamp(\"last_cleaned\"),\n  priority: priorityEnum(\"priority\").default('media'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cleaning sessions table\nexport const cleaningSessions = pgTable(\"cleaning_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => rooms.id),\n  housekeeperId: varchar(\"housekeeper_id\").notNull().references(() => users.id),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  pausedTime: integer(\"paused_time\").default(0), // in seconds\n  totalTime: integer(\"total_time\"), // in seconds\n  status: varchar(\"status\").notNull().default('active'), // active, paused, completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Checklist templates table\nexport const checklistTemplates = pgTable(\"checklist_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  items: jsonb(\"items\").notNull(), // Array of checklist items with categories\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Checklist completions table\nexport const checklistCompletions = pgTable(\"checklist_completions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => rooms.id),\n  templateId: varchar(\"template_id\").notNull().references(() => checklistTemplates.id),\n  housekeeperId: varchar(\"housekeeper_id\").notNull().references(() => users.id),\n  supervisorId: varchar(\"supervisor_id\").references(() => users.id),\n  completedItems: jsonb(\"completed_items\").notNull().default('{}'), // Object with item IDs as keys, boolean as values\n  supervisorSignature: text(\"supervisor_signature\"),\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Problem reports table\nexport const problemReports = pgTable(\"problem_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => rooms.id),\n  reportedBy: varchar(\"reported_by\").notNull().references(() => users.id),\n  type: problemTypeEnum(\"type\").notNull(),\n  priority: priorityEnum(\"priority\").notNull().default('media'),\n  description: text(\"description\").notNull(),\n  location: text(\"location\"),\n  photos: jsonb(\"photos\").default('[]'), // Array of photo URLs\n  status: varchar(\"status\").notNull().default('reported'), // reported, in_progress, resolved\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  assignedRooms: many(rooms),\n  cleaningSessions: many(cleaningSessions),\n  checklistCompletions: many(checklistCompletions),\n  problemReports: many(problemReports),\n}));\n\nexport const roomsRelations = relations(rooms, ({ one, many }) => ({\n  assignedUser: one(users, {\n    fields: [rooms.assignedTo],\n    references: [users.id],\n  }),\n  cleaningSessions: many(cleaningSessions),\n  checklistCompletions: many(checklistCompletions),\n  problemReports: many(problemReports),\n}));\n\nexport const cleaningSessionsRelations = relations(cleaningSessions, ({ one }) => ({\n  room: one(rooms, {\n    fields: [cleaningSessions.roomId],\n    references: [rooms.id],\n  }),\n  housekeeper: one(users, {\n    fields: [cleaningSessions.housekeeperId],\n    references: [users.id],\n  }),\n}));\n\nexport const checklistCompletionsRelations = relations(checklistCompletions, ({ one }) => ({\n  room: one(rooms, {\n    fields: [checklistCompletions.roomId],\n    references: [rooms.id],\n  }),\n  template: one(checklistTemplates, {\n    fields: [checklistCompletions.templateId],\n    references: [checklistTemplates.id],\n  }),\n  housekeeper: one(users, {\n    fields: [checklistCompletions.housekeeperId],\n    references: [users.id],\n  }),\n  supervisor: one(users, {\n    fields: [checklistCompletions.supervisorId],\n    references: [users.id],\n  }),\n}));\n\nexport const problemReportsRelations = relations(problemReports, ({ one }) => ({\n  room: one(rooms, {\n    fields: [problemReports.roomId],\n    references: [rooms.id],\n  }),\n  reporter: one(users, {\n    fields: [problemReports.reportedBy],\n    references: [users.id],\n  }),\n  resolver: one(users, {\n    fields: [problemReports.resolvedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCleaningSessionSchema = createInsertSchema(cleaningSessions).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  startTime: z.string().datetime().transform((val) => new Date(val)),\n  endTime: z.string().datetime().transform((val) => new Date(val)).optional(),\n});\n\nexport const insertChecklistCompletionSchema = createInsertSchema(checklistCompletions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProblemReportSchema = createInsertSchema(problemReports).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type CleaningSession = typeof cleaningSessions.$inferSelect;\nexport type InsertCleaningSession = z.infer<typeof insertCleaningSessionSchema>;\nexport type ChecklistCompletion = typeof checklistCompletions.$inferSelect;\nexport type InsertChecklistCompletion = z.infer<typeof insertChecklistCompletionSchema>;\nexport type ProblemReport = typeof problemReports.$inferSelect;\nexport type InsertProblemReport = z.infer<typeof insertProblemReportSchema>;\nexport type ChecklistTemplate = typeof checklistTemplates.$inferSelect;\n\n// WebSocket message types\nexport type WSMessage = {\n  type: 'room_status_update' | 'timer_update' | 'checklist_update' | 'problem_report';\n  data: any;\n};\n","size_bytes":8338},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Landing from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Verificando autenticação...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route component={NotFound} />\n        </>\n      ) : (\n        <Route path=\"*\" component={Landing} />\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Toaster />\n      <Router />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1306},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(210, 40%, 96%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(221.2, 83.2%, 53.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n}\n\n/* Room status gradients */\n.status-dirty {\n  background: linear-gradient(135deg, hsl(0, 93%, 94%) 0%, hsl(0, 90%, 88%) 100%);\n}\n\n.status-cleaning {\n  background: linear-gradient(135deg, hsl(48, 100%, 96%) 0%, hsl(48, 95%, 90%) 100%);\n}\n\n.status-inspection {\n  background: linear-gradient(135deg, hsl(25, 95%, 95%) 0%, hsl(25, 92%, 87%) 100%);\n}\n\n.status-clean {\n  background: linear-gradient(135deg, hsl(142, 76%, 96%) 0%, hsl(142, 69%, 90%) 100%);\n}\n\n.status-occupied {\n  background: linear-gradient(135deg, hsl(210, 40%, 98%) 0%, hsl(214, 32%, 91%) 100%);\n}\n\n/* Timer animation */\n.timer-running {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3215},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/checklist-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Room, User, ChecklistTemplate } from \"@/lib/types\";\n\ninterface ChecklistModalProps {\n  room: Room;\n  currentUser: User;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ChecklistModal({\n  room,\n  currentUser,\n  isOpen,\n  onClose,\n}: ChecklistModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [completedItems, setCompletedItems] = useState<Record<string, boolean>>({});\n  const [supervisorId, setSupervisorId] = useState<string>(\"\");\n  const [housekeeperName, setHousekeeperName] = useState(currentUser.name);\n  const [releaseTime, setReleaseTime] = useState(\"\");\n\n  // Fetch checklist template\n  const { data: template, isLoading } = useQuery({\n    queryKey: [\"/api/checklist-template\", \"Limpeza 5 Estrelas\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/checklist-template/Limpeza 5 Estrelas\");\n      if (!response.ok) throw new Error(\"Failed to fetch template\");\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Fetch supervisors\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isOpen,\n  });\n\n  const supervisors = users.filter((user: User) => user.role === \"supervisor\");\n\n  // Save checklist progress mutation\n  const saveProgressMutation = useMutation({\n    mutationFn: async () => {\n      if (!template) throw new Error(\"No template available\");\n      \n      return await apiRequest(\"POST\", \"/api/checklist-completions\", {\n        roomId: room.id,\n        templateId: template.id,\n        housekeeperId: currentUser.id,\n        completedItems,\n        isCompleted: false,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Progresso salvo\",\n        description: \"O progresso do checklist foi salvo com sucesso.\",\n      });\n    },\n  });\n\n  // Submit checklist mutation\n  const submitChecklistMutation = useMutation({\n    mutationFn: async () => {\n      if (!template) throw new Error(\"No template available\");\n      \n      const totalItems = getTotalItemCount();\n      const completedCount = Object.values(completedItems).filter(Boolean).length;\n      \n      if (completedCount < totalItems) {\n        throw new Error(\"Todos os itens devem ser completados antes de finalizar.\");\n      }\n      \n      if (!supervisorId) {\n        throw new Error(\"Um supervisor deve ser selecionado.\");\n      }\n\n      return await apiRequest(\"POST\", \"/api/checklist-completions\", {\n        roomId: room.id,\n        templateId: template.id,\n        housekeeperId: currentUser.id,\n        supervisorId,\n        completedItems,\n        isCompleted: true,\n        completedAt: new Date().toISOString(),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Checklist finalizado\",\n        description: \"O checklist foi finalizado e enviado para aprovação.\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleItemToggle = (itemId: string, checked: boolean) => {\n    setCompletedItems(prev => ({\n      ...prev,\n      [itemId]: checked\n    }));\n  };\n\n  const getTotalItemCount = () => {\n    if (!template?.items) return 0;\n    \n    return Object.values(template.items).reduce((total: number, step: any) => {\n      return total + (step.items?.length || 0);\n    }, 0);\n  };\n\n  const getCompletedCount = () => {\n    return Object.values(completedItems).filter(Boolean).length;\n  };\n\n  const getProgressPercentage = () => {\n    const total = getTotalItemCount();\n    const completed = getCompletedCount();\n    return total > 0 ? Math.round((completed / total) * 100) : 0;\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      setReleaseTime(new Date().toTimeString().slice(0, 5));\n    }\n  }, [isOpen]);\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"ml-2\">Carregando checklist...</span>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!template) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Erro</DialogTitle>\n            <DialogDescription>\n              Não foi possível carregar o template do checklist.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end\">\n            <Button onClick={onClose}>Fechar</Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\" data-testid=\"checklist-modal\">\n        <DialogHeader className=\"pb-4 border-b\">\n          <DialogTitle className=\"text-2xl font-bold\">\n            Protocolo \"Limpeza 5 Estrelas\"\n          </DialogTitle>\n          <DialogDescription>\n            Quarto {room.number} - {room.type}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"overflow-y-auto max-h-[calc(90vh-200px)] p-6\">\n          \n          {/* Checklist Header Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-secondary rounded-lg\">\n            <div>\n              <Label htmlFor=\"housekeeper\" className=\"text-sm font-medium text-muted-foreground\">\n                Camareira(o):\n              </Label>\n              <Input\n                id=\"housekeeper\"\n                value={housekeeperName}\n                onChange={(e) => setHousekeeperName(e.target.value)}\n                className=\"mt-1\"\n                data-testid=\"input-housekeeper\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"date\" className=\"text-sm font-medium text-muted-foreground\">\n                Data:\n              </Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                defaultValue={new Date().toISOString().split('T')[0]}\n                className=\"mt-1\"\n                data-testid=\"input-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"releaseTime\" className=\"text-sm font-medium text-muted-foreground\">\n                Hora da Liberação:\n              </Label>\n              <Input\n                id=\"releaseTime\"\n                type=\"time\"\n                value={releaseTime}\n                onChange={(e) => setReleaseTime(e.target.value)}\n                className=\"mt-1\"\n                data-testid=\"input-release-time\"\n              />\n            </div>\n          </div>\n\n          {/* Checklist Steps */}\n          {Object.entries(template.items).map(([stepKey, step]: [string, any], stepIndex) => (\n            <div key={stepKey} className=\"mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className={`w-8 h-8 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3 ${\n                  stepIndex === 0 ? 'bg-blue-600' :\n                  stepIndex === 1 ? 'bg-green-600' :\n                  stepIndex === 2 ? 'bg-purple-600' : 'bg-orange-600'\n                }`}>\n                  {stepIndex + 1}\n                </div>\n                <h3 className=\"text-lg font-bold text-foreground\">{step.title}</h3>\n              </div>\n              \n              <div className=\"space-y-3 ml-11\">\n                {step.items.map((item: any) => (\n                  <div key={item.id} className=\"flex items-start space-x-3\">\n                    <Checkbox\n                      id={item.id}\n                      checked={completedItems[item.id] || false}\n                      onCheckedChange={(checked) => handleItemToggle(item.id, !!checked)}\n                      className=\"mt-1\"\n                      data-testid={`checkbox-${item.id}`}\n                    />\n                    <Label\n                      htmlFor={item.id}\n                      className=\"text-sm text-foreground cursor-pointer flex-1\"\n                    >\n                      {item.text}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          {/* Supervisor Selection */}\n          <div className=\"mb-8\">\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n              <Label className=\"block text-sm font-medium text-yellow-800 mb-2\">\n                Supervisor(a) Responsável:\n              </Label>\n              <select\n                className=\"w-full px-3 py-2 border border-yellow-300 rounded-md text-sm mb-3\"\n                value={supervisorId}\n                onChange={(e) => setSupervisorId(e.target.value)}\n                data-testid=\"select-supervisor\"\n              >\n                <option value=\"\">Selecionar supervisor...</option>\n                {supervisors.map((supervisor: User) => (\n                  <option key={supervisor.id} value={supervisor.id}>\n                    {supervisor.name}\n                  </option>\n                ))}\n              </select>\n              \n              <Label className=\"block text-sm font-medium text-yellow-800 mb-2\">\n                Assinatura Digital:\n              </Label>\n              <div className=\"border-2 border-dashed border-yellow-300 rounded-lg p-8 text-center bg-yellow-25\">\n                <i className=\"fas fa-signature text-3xl text-yellow-600 mb-2\"></i>\n                <p className=\"text-sm text-yellow-700\">Assinatura será processada automaticamente</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Indicator */}\n          <div className=\"bg-secondary rounded-lg p-4 mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium text-foreground\">Progresso do Checklist</span>\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"progress-text\">\n                {getCompletedCount()}/{getTotalItemCount()} itens\n              </span>\n            </div>\n            <Progress value={getProgressPercentage()} className=\"w-full\" data-testid=\"progress-bar\" />\n          </div>\n        </div>\n        \n        <div className=\"flex justify-between items-center p-6 border-t border-border bg-secondary\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => saveProgressMutation.mutate()}\n            disabled={saveProgressMutation.isPending}\n            data-testid=\"button-save-progress\"\n          >\n            <i className=\"fas fa-save mr-2\"></i>\n            {saveProgressMutation.isPending ? \"Salvando...\" : \"Salvar Progresso\"}\n          </Button>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => submitChecklistMutation.mutate()}\n              disabled={submitChecklistMutation.isPending || getProgressPercentage() < 100}\n              data-testid=\"button-submit-checklist\"\n            >\n              <i className=\"fas fa-check-circle mr-2\"></i>\n              {submitChecklistMutation.isPending ? \"Finalizando...\" : \"Finalizar Checklist\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12256},"client/src/components/navigation-header.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport type { User } from \"@/lib/types\";\n\ninterface NavigationHeaderProps {\n  user: User;\n}\n\nexport default function NavigationHeader({ user }: NavigationHeaderProps) {\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"manager\":\n        return \"bg-primary text-primary-foreground\";\n      case \"supervisor\":\n        return \"bg-orange-500 text-white\";\n      case \"housekeeper\":\n        return \"bg-green-500 text-white\";\n      default:\n        return \"bg-secondary text-secondary-foreground\";\n    }\n  };\n\n  const getRoleText = (role: string) => {\n    switch (role) {\n      case \"manager\":\n        return \"Gerente\";\n      case \"supervisor\":\n        return \"Supervisor\";\n      case \"housekeeper\":\n        return \"Camareira\";\n      default:\n        return role;\n    }\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <i className=\"fas fa-hotel text-primary text-2xl\" data-testid=\"logo-icon\"></i>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"app-title\">\n              Governança Hoteleira\n            </h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* User Role Indicator */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">Usuário:</span>\n              <Badge \n                className={`${getRoleBadgeColor(user.role)} font-medium`}\n                data-testid=\"user-role-badge\"\n              >\n                {getRoleText(user.role)}\n              </Badge>\n            </div>\n            \n            {/* Notifications */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"relative text-muted-foreground hover:text-foreground\"\n              data-testid=\"notifications-button\"\n            >\n              <i className=\"fas fa-bell text-lg\"></i>\n              <span className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                3\n              </span>\n            </Button>\n            \n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"flex items-center space-x-2 p-2\"\n                  data-testid=\"user-menu-trigger\"\n                >\n                  <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-user text-sm\"></i>\n                  </div>\n                  <span className=\"hidden sm:block text-sm font-medium\" data-testid=\"user-name\">\n                    {user.name}\n                  </span>\n                  <i className=\"fas fa-chevron-down text-xs\"></i>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem data-testid=\"menu-profile\">\n                  <i className=\"fas fa-user mr-2\"></i>\n                  Perfil\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-settings\">\n                  <i className=\"fas fa-cog mr-2\"></i>\n                  Configurações\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  data-testid=\"menu-logout\"\n                  onClick={() => {\n                    window.location.href = '/api/logout';\n                  }}\n                  className=\"cursor-pointer\"\n                >\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Sair\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4305},"client/src/components/problem-report-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Room, User } from \"@/lib/types\";\n\ninterface ProblemReportModalProps {\n  room: Room;\n  currentUser: User;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ProblemReportModal({\n  room,\n  currentUser,\n  isOpen,\n  onClose,\n}: ProblemReportModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    type: \"\",\n    priority: \"media\",\n    description: \"\",\n    location: \"\",\n  });\n\n  const problemTypes = [\n    { value: \"eletrico\", label: \"Problema Elétrico\" },\n    { value: \"hidraulico\", label: \"Problema Hidráulico\" },\n    { value: \"ar_condicionado\", label: \"Ar Condicionado\" },\n    { value: \"moveis\", label: \"Móveis/Decoração\" },\n    { value: \"eletronicos\", label: \"Eletrônicos\" },\n    { value: \"limpeza_especial\", label: \"Limpeza Especial\" },\n    { value: \"outros\", label: \"Outros\" },\n  ];\n\n  const priorities = [\n    { value: \"baixa\", label: \"Baixa\", color: \"text-green-600\" },\n    { value: \"media\", label: \"Média\", color: \"text-yellow-600\" },\n    { value: \"alta\", label: \"Alta\", color: \"text-red-600\" },\n    { value: \"urgente\", label: \"Urgente\", color: \"text-red-800 font-bold\" },\n  ];\n\n  // Submit problem report mutation\n  const submitProblemMutation = useMutation({\n    mutationFn: async () => {\n      if (!formData.type || !formData.description.trim()) {\n        throw new Error(\"Tipo e descrição são obrigatórios.\");\n      }\n\n      return await apiRequest(\"POST\", \"/api/problem-reports\", {\n        roomId: room.id,\n        reportedBy: currentUser.id,\n        type: formData.type,\n        priority: formData.priority,\n        description: formData.description,\n        location: formData.location,\n        photos: [], // TODO: Implement photo upload\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/problem-reports\"] });\n      toast({\n        title: \"Problema reportado\",\n        description: `Problema no quarto ${room.number} reportado com sucesso. O status foi alterado para \"Para Inspeção\".`,\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      type: \"\",\n      priority: \"media\",\n      description: \"\",\n      location: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitProblemMutation.mutate();\n  };\n\n  const handleClose = () => {\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"problem-report-modal\">\n        <DialogHeader className=\"pb-4 border-b\">\n          <DialogTitle className=\"text-xl font-bold\">\n            Reportar Problema\n          </DialogTitle>\n          <DialogDescription>\n            Quarto {room.number} - Descreva o problema encontrado no quarto para que a equipe de manutenção possa resolvê-lo.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6 p-6\">\n          \n          <div>\n            <Label htmlFor=\"problemType\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Tipo de Problema\n            </Label>\n            <Select\n              value={formData.type}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n            >\n              <SelectTrigger data-testid=\"select-problem-type\">\n                <SelectValue placeholder=\"Selecionar tipo...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {problemTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n              Prioridade\n            </Label>\n            <RadioGroup\n              value={formData.priority}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, priority: value }))}\n              className=\"flex space-x-4\"\n            >\n              {priorities.map((priority) => (\n                <div key={priority.value} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem\n                    value={priority.value}\n                    id={priority.value}\n                    data-testid={`radio-priority-${priority.value}`}\n                  />\n                  <Label \n                    htmlFor={priority.value}\n                    className={`text-sm ${priority.color}`}\n                  >\n                    {priority.label}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Descrição do Problema\n            </Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-32 resize-none\"\n              placeholder=\"Descreva detalhadamente o problema encontrado...\"\n              required\n              data-testid=\"textarea-description\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"location\" className=\"text-sm font-medium text-foreground mb-2 block\">\n              Localização Específica\n            </Label>\n            <Input\n              id=\"location\"\n              value={formData.location}\n              onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n              placeholder=\"Ex: Banheiro, próximo à janela, lado direito da cama...\"\n              data-testid=\"input-location\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n              Fotos (opcional)\n            </Label>\n            <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n              <i className=\"fas fa-camera text-3xl text-muted-foreground mb-2\"></i>\n              <p className=\"text-sm text-muted-foreground mb-2\">Clique para adicionar fotos do problema</p>\n              <Button \n                type=\"button\" \n                variant=\"secondary\" \n                className=\"text-sm\"\n                data-testid=\"button-upload-photo\"\n              >\n                Selecionar Fotos\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n              <div>\n                <h4 className=\"text-sm font-medium text-yellow-800\">Atenção</h4>\n                <p className=\"text-sm text-yellow-700 mt-1\">\n                  Ao reportar este problema, o status do quarto será alterado para \"Para Inspeção\" \n                  e a equipe de manutenção será notificada automaticamente.\n                </p>\n              </div>\n            </div>\n          </div>\n        </form>\n        \n        <div className=\"flex justify-end space-x-3 p-6 border-t border-border\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={handleClose}\n            data-testid=\"button-cancel\"\n          >\n            Cancelar\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"destructive\"\n            onClick={handleSubmit}\n            disabled={submitProblemMutation.isPending || !formData.type || !formData.description.trim()}\n            data-testid=\"button-submit-problem\"\n          >\n            <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n            {submitProblemMutation.isPending ? \"Reportando...\" : \"Reportar Problema\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9096},"client/src/components/room-card.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ApprovalModal } from \"./approval-modal\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport RoomStatusModal from \"@/components/room-status-modal\";\nimport type { Room, User, CleaningSession } from \"@/lib/types\";\n\ninterface RoomCardProps {\n  room: Room;\n  currentUser: User;\n  users: User[];\n  onOpenChecklist: (room: Room) => void;\n  onOpenProblemReport: (room: Room) => void;\n  onTimerUpdate: (session: CleaningSession | null) => void;\n}\n\n// Mapeamento dos status internos para os nomes em português\nconst getStatusLabel = (status: string) => {\n  const statusMap = {\n    dirty: \"Ocupado e Sujo\",\n    clean: \"Limpo\", \n    occupied: \"Ocupado Limpo\",\n    cleaning: \"Vazio\",\n    inspection: \"Disponível para o check in\",\n    approved: \"Aprovado\"\n  } as const;\n  return statusMap[status as keyof typeof statusMap] || status;\n};\n\nexport default function RoomCard({\n  room,\n  currentUser,\n  users,\n  onOpenChecklist,\n  onOpenProblemReport,\n  onTimerUpdate,\n}: RoomCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [elapsedTime, setElapsedTime] = useState(\"00:00\");\n  const [isApprovalModalOpen, setIsApprovalModalOpen] = useState(false);\n\n  // Get active cleaning session\n  const { data: activeSession } = useQuery({\n    queryKey: [\"/api/cleaning-sessions/active\", room.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/cleaning-sessions/active/${room.id}`);\n      if (!response.ok) return null;\n      return response.json();\n    },\n    refetchInterval: room.status === \"cleaning\" ? 1000 : false,\n  });\n\n  // Calculate elapsed time for active sessions\n  useEffect(() => {\n    if (activeSession && activeSession.status === \"active\") {\n      const interval = setInterval(() => {\n        const start = new Date(activeSession.startTime);\n        const now = new Date();\n        const elapsed = Math.floor((now.getTime() - start.getTime()) / 1000) + (activeSession.pausedTime || 0);\n        const minutes = Math.floor(elapsed / 60);\n        const seconds = elapsed % 60;\n        setElapsedTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [activeSession]);\n\n  // Start cleaning mutation\n  const startCleaningMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/cleaning-sessions\", {\n        roomId: room.id,\n        housekeeperId: currentUser.id,\n        startTime: new Date().toISOString(),\n        status: \"active\",\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions/active\", room.id] });\n      onTimerUpdate(data);\n      toast({\n        title: \"Limpeza iniciada\",\n        description: `Limpeza do quarto ${room.number} iniciada com sucesso.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível iniciar a limpeza.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Pause cleaning mutation\n  const pauseCleaningMutation = useMutation({\n    mutationFn: async () => {\n      if (!activeSession) throw new Error(\"No active session\");\n      return await apiRequest(\"PATCH\", `/api/cleaning-sessions/${activeSession.id}`, {\n        status: \"paused\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions/active\", room.id] });\n      toast({\n        title: \"Limpeza pausada\",\n        description: `Limpeza do quarto ${room.number} pausada.`,\n      });\n    },\n  });\n\n  // Complete cleaning mutation\n  const completeCleaningMutation = useMutation({\n    mutationFn: async () => {\n      if (!activeSession) throw new Error(\"No active session\");\n      const now = new Date();\n      const start = new Date(activeSession.startTime);\n      const totalTime = Math.floor((now.getTime() - start.getTime()) / 1000) + (activeSession.pausedTime || 0);\n      \n      return await apiRequest(\"PATCH\", `/api/cleaning-sessions/${activeSession.id}`, {\n        status: \"completed\",\n        endTime: now.toISOString(),\n        totalTime,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions/active\", room.id] });\n      onTimerUpdate(null);\n      toast({\n        title: \"Limpeza concluída\",\n        description: `Limpeza do quarto ${room.number} concluída.`,\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"dirty\":\n        return \"status-dirty border-red-500\";\n      case \"cleaning\":\n        return \"status-cleaning border-yellow-500\";\n      case \"inspection\":\n        return \"status-inspection border-orange-500\";\n      case \"clean\":\n        return \"status-clean border-green-500\";\n      case \"occupied\":\n        return \"status-occupied border-gray-500\";\n      default:\n        return \"border-border\";\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const label = getStatusLabel(status);\n    const statusBadge = (() => {\n      switch (status) {\n        case \"dirty\":\n          return <Badge className=\"bg-red-500 text-white\">{label}</Badge>;\n        case \"cleaning\":\n          return <Badge className=\"bg-yellow-500 text-white timer-running\">{label}</Badge>;\n        case \"inspection\":\n          return <Badge className=\"bg-orange-500 text-white\">{label}</Badge>;\n        case \"clean\":\n          return <Badge className=\"bg-green-500 text-white\">{label}</Badge>;\n        case \"occupied\":\n          return <Badge className=\"bg-gray-500 text-white\">{label}</Badge>;\n        default:\n          return <Badge variant=\"secondary\">{label}</Badge>;\n      }\n    })();\n\n    // Se o usuário é manager, permite alterar status\n    if (currentUser.role === \"manager\") {\n      return (\n        <RoomStatusModal room={room}>\n          <button className=\"cursor-pointer\" data-testid={`change-status-${room.id}`}>\n            {statusBadge}\n          </button>\n        </RoomStatusModal>\n      );\n    }\n    \n    return statusBadge;\n  };\n\n  const getAssignedUserName = () => {\n    const assignedUser = users.find(u => u.id === room.assignedTo);\n    return assignedUser?.name || \"Não atribuído\";\n  };\n\n  const getRoomTypeText = (type: string) => {\n    switch (type) {\n      case \"standard\":\n        return \"Standard\";\n      case \"deluxe\":\n        return \"Deluxe\";\n      case \"suite\":\n        return \"Suite\";\n      default:\n        return type;\n    }\n  };\n\n  return (\n    <Card \n      className={`${getStatusColor(room.status)} border-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300`}\n      data-testid={`room-card-${room.number}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div>\n            <h3 className=\"text-xl font-bold text-gray-800\" data-testid={`room-number-${room.number}`}>\n              Quarto {room.number}\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              Andar {room.floor} • {getRoomTypeText(room.type)}\n            </p>\n          </div>\n          {getStatusBadge(room.status)}\n        </div>\n        \n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Camareira:</span>\n            <span className=\"font-medium\" data-testid={`assigned-user-${room.number}`}>\n              {getAssignedUserName()}\n            </span>\n          </div>\n          \n          {room.status === \"cleaning\" && activeSession && (\n            <>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Tempo decorrido:</span>\n                <span className=\"font-mono text-yellow-700 font-bold\" data-testid={`elapsed-time-${room.number}`}>\n                  {elapsedTime}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Iniciado:</span>\n                <span>\n                  {new Date(activeSession.startTime).toLocaleTimeString('pt-BR', { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                  })}\n                </span>\n              </div>\n            </>\n          )}\n          \n          {room.lastCleaned && room.status !== \"cleaning\" && (\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Última limpeza:</span>\n              <span>\n                {new Date(room.lastCleaned).toLocaleDateString('pt-BR')}\n              </span>\n            </div>\n          )}\n          \n          {room.priority && room.status === \"dirty\" && (\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Prioridade:</span>\n              <span className={`font-medium ${\n                room.priority === \"alta\" || room.priority === \"urgente\" ? \"text-red-600\" : \n                room.priority === \"media\" ? \"text-yellow-600\" : \"text-green-600\"\n              }`}>\n                {room.priority.charAt(0).toUpperCase() + room.priority.slice(1)}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"space-y-2\">\n          {/* Main action button */}\n          {room.status === \"dirty\" && (\n            <Button\n              className=\"w-full bg-blue-600 text-white hover:bg-blue-700\"\n              onClick={() => startCleaningMutation.mutate()}\n              disabled={startCleaningMutation.isPending}\n              data-testid={`button-start-cleaning-${room.number}`}\n            >\n              <i className=\"fas fa-play mr-2\"></i>\n              {startCleaningMutation.isPending ? \"Iniciando...\" : \"Iniciar Limpeza\"}\n            </Button>\n          )}\n          \n          {room.status === \"cleaning\" && (\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1 border-yellow-600 text-yellow-700 hover:bg-yellow-50\"\n                onClick={() => pauseCleaningMutation.mutate()}\n                disabled={pauseCleaningMutation.isPending}\n                data-testid={`button-pause-cleaning-${room.number}`}\n              >\n                <i className=\"fas fa-pause mr-1\"></i>\n                Pausar\n              </Button>\n              <Button\n                className=\"flex-1 bg-green-600 text-white hover:bg-green-700\"\n                onClick={() => completeCleaningMutation.mutate()}\n                disabled={completeCleaningMutation.isPending}\n                data-testid={`button-complete-cleaning-${room.number}`}\n              >\n                <i className=\"fas fa-check mr-1\"></i>\n                Concluir\n              </Button>\n            </div>\n          )}\n          \n          {room.status === \"inspection\" && currentUser.role === \"manager\" && (\n            <Button\n              className=\"w-full bg-orange-600 text-white hover:bg-orange-700\"\n              onClick={() => setIsApprovalModalOpen(true)}\n              data-testid={`button-approve-room-${room.number}`}\n            >\n              <i className=\"fas fa-clipboard-check mr-2\"></i>\n              Aprovar Quarto\n            </Button>\n          )}\n          \n          {room.status === \"clean\" && (\n            <Button\n              className=\"w-full bg-green-600 text-white hover:bg-green-700\"\n              data-testid={`button-mark-available-${room.number}`}\n            >\n              <i className=\"fas fa-home mr-2\"></i>\n              Disponibilizar\n            </Button>\n          )}\n          \n          {room.status === \"occupied\" && (\n            <Button\n              className=\"w-full bg-gray-400 text-white cursor-not-allowed opacity-75\"\n              disabled\n              data-testid={`button-occupied-${room.number}`}\n            >\n              <i className=\"fas fa-lock mr-2\"></i>\n              Quarto Ocupado\n            </Button>\n          )}\n          \n          {/* Secondary action buttons */}\n          {room.status !== \"occupied\" && (\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1 border-orange-200 text-orange-700 hover:bg-orange-50\"\n                onClick={() => onOpenProblemReport(room)}\n                data-testid={`button-report-problem-${room.number}`}\n              >\n                <i className=\"fas fa-exclamation-triangle mr-1\"></i>\n                Reportar\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"flex-1 border-purple-200 text-purple-700 hover:bg-purple-50\"\n                onClick={() => onOpenChecklist(room)}\n                data-testid={`button-checklist-${room.number}`}\n              >\n                <i className=\"fas fa-list-check mr-1\"></i>\n                Checklist\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n      \n      <ApprovalModal\n        isOpen={isApprovalModalOpen}\n        onClose={() => setIsApprovalModalOpen(false)}\n        room={room}\n        onApprovalComplete={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n        }}\n      />\n    </Card>\n  );\n}\n","size_bytes":13735},"client/src/components/timer-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CleaningSession } from \"@/lib/types\";\n\ninterface TimerWidgetProps {\n  session: CleaningSession;\n  onUpdate: (session: CleaningSession | null) => void;\n}\n\nexport default function TimerWidget({ session, onUpdate }: TimerWidgetProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [elapsedTime, setElapsedTime] = useState(\"00:00\");\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Update elapsed time every second\n  useEffect(() => {\n    if (session?.status === \"active\") {\n      const interval = setInterval(() => {\n        const start = new Date(session.startTime);\n        const now = new Date();\n        const elapsed = Math.floor((now.getTime() - start.getTime()) / 1000) + (session.pausedTime || 0);\n        const minutes = Math.floor(elapsed / 60);\n        const seconds = elapsed % 60;\n        setElapsedTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [session]);\n\n  // Pause cleaning mutation\n  const pauseCleaningMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"PATCH\", `/api/cleaning-sessions/${session.id}`, {\n        status: \"paused\",\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions/active\", session.roomId] });\n      onUpdate(data);\n      toast({\n        title: \"Limpeza pausada\",\n        description: \"A limpeza foi pausada com sucesso.\",\n      });\n    },\n  });\n\n  // Complete cleaning mutation\n  const completeCleaningMutation = useMutation({\n    mutationFn: async () => {\n      const now = new Date();\n      const start = new Date(session.startTime);\n      const totalTime = Math.floor((now.getTime() - start.getTime()) / 1000) + (session.pausedTime || 0);\n      \n      return await apiRequest(\"PATCH\", `/api/cleaning-sessions/${session.id}`, {\n        status: \"completed\",\n        endTime: now.toISOString(),\n        totalTime,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions/active\", session.roomId] });\n      onUpdate(null);\n      toast({\n        title: \"Limpeza concluída\",\n        description: \"A limpeza foi concluída com sucesso.\",\n      });\n    },\n  });\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Card \n      className=\"fixed bottom-6 right-6 min-w-[250px] z-40 shadow-2xl border\"\n      data-testid=\"timer-widget\"\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full timer-running\"></div>\n            <span className=\"text-sm font-medium text-foreground\">Limpeza em Andamento</span>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-1 h-auto text-muted-foreground hover:text-foreground\"\n            onClick={() => setIsVisible(false)}\n            data-testid=\"button-close-timer\"\n          >\n            <i className=\"fas fa-times text-sm\"></i>\n          </Button>\n        </div>\n        \n        <div className=\"text-center\">\n          <p className=\"text-xs text-muted-foreground mb-1\">\n            Quarto <span data-testid=\"timer-room-number\">{session.roomId}</span>\n          </p>\n          <p \n            className=\"text-2xl font-mono font-bold text-yellow-600\" \n            data-testid=\"timer-elapsed\"\n          >\n            {elapsedTime}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            Iniciado às{\" \"}\n            <span data-testid=\"timer-start-time\">\n              {new Date(session.startTime).toLocaleTimeString('pt-BR', { \n                hour: '2-digit', \n                minute: '2-digit' \n              })}\n            </span>\n          </p>\n        </div>\n        \n        <div className=\"flex space-x-2 mt-4\">\n          <Button\n            variant=\"outline\"\n            className=\"flex-1 border-yellow-600 text-yellow-700 hover:bg-yellow-50\"\n            onClick={() => pauseCleaningMutation.mutate()}\n            disabled={pauseCleaningMutation.isPending}\n            data-testid=\"button-pause-timer\"\n          >\n            <i className=\"fas fa-pause mr-1\"></i>\n            Pausar\n          </Button>\n          <Button\n            className=\"flex-1 bg-green-600 text-white hover:bg-green-700\"\n            onClick={() => completeCleaningMutation.mutate()}\n            disabled={completeCleaningMutation.isPending}\n            data-testid=\"button-complete-timer\"\n          >\n            <i className=\"fas fa-check mr-1\"></i>\n            Concluir\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5168},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WSMessage } from \"@shared/schema\";\n\nexport function useWebSocket() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  const reconnectDelay = 3000;\n\n  useEffect(() => {\n    const connect = () => {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        wsRef.current = new WebSocket(wsUrl);\n\n        wsRef.current.onopen = () => {\n          console.log(\"WebSocket connected\");\n          reconnectAttempts.current = 0;\n        };\n\n        wsRef.current.onmessage = (event) => {\n          try {\n            const message: WSMessage = JSON.parse(event.data);\n            handleWebSocketMessage(message);\n          } catch (error) {\n            console.error(\"Error parsing WebSocket message:\", error);\n          }\n        };\n\n        wsRef.current.onclose = (event) => {\n          console.log(\"WebSocket disconnected:\", event.code, event.reason);\n          \n          // Attempt to reconnect if not manually closed\n          if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n            reconnectAttempts.current++;\n            console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})...`);\n            \n            reconnectTimeoutRef.current = setTimeout(() => {\n              connect();\n            }, reconnectDelay);\n          }\n        };\n\n        wsRef.current.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n        };\n      } catch (error) {\n        console.error(\"Error creating WebSocket connection:\", error);\n      }\n    };\n\n    const handleWebSocketMessage = (message: WSMessage) => {\n      switch (message.type) {\n        case \"room_status_update\":\n          // Invalidate rooms query to trigger refetch\n          queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n          \n          toast({\n            title: \"Status do quarto atualizado\",\n            description: `Quarto ${message.data.room?.number || \"desconhecido\"} foi atualizado para ${message.data.status}.`,\n          });\n          break;\n\n        case \"timer_update\":\n          // Invalidate cleaning sessions queries\n          queryClient.invalidateQueries({ queryKey: [\"/api/cleaning-sessions\"] });\n          \n          if (message.data.action === \"start\") {\n            toast({\n              title: \"Limpeza iniciada\",\n              description: \"Uma nova sessão de limpeza foi iniciada.\",\n            });\n          }\n          break;\n\n        case \"checklist_update\":\n          // Invalidate checklist queries\n          queryClient.invalidateQueries({ queryKey: [\"/api/checklist-completions\"] });\n          \n          if (message.data.action === \"update\" && message.data.completion?.isCompleted) {\n            toast({\n              title: \"Checklist finalizado\",\n              description: \"Um checklist foi finalizado e aprovado.\",\n            });\n          }\n          break;\n\n        case \"problem_report\":\n          // Invalidate problem reports and rooms queries\n          queryClient.invalidateQueries({ queryKey: [\"/api/problem-reports\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n          \n          if (message.data.action === \"create\") {\n            toast({\n              title: \"Novo problema reportado\",\n              description: \"Um novo problema foi reportado e requer atenção.\",\n              variant: \"destructive\",\n            });\n          }\n          break;\n\n        default:\n          console.log(\"Unknown WebSocket message type:\", message.type);\n      }\n    };\n\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      if (wsRef.current) {\n        wsRef.current.close(1000, \"Component unmounting\");\n        wsRef.current = null;\n      }\n    };\n  }, [queryClient, toast]);\n\n  return {\n    isConnected: wsRef.current?.readyState === WebSocket.OPEN,\n    send: (message: WSMessage) => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify(message));\n      }\n    },\n  };\n}\n","size_bytes":4534},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"// Re-export types from shared schema for convenience\nexport type {\n  User,\n  InsertUser,\n  Room,\n  InsertRoom,\n  CleaningSession,\n  InsertCleaningSession,\n  ChecklistCompletion,\n  InsertChecklistCompletion,\n  ProblemReport,\n  InsertProblemReport,\n  ChecklistTemplate,\n  WSMessage,\n} from \"@shared/schema\";\n\n// Import types for interface extensions\nimport type { Room, CleaningSession, ProblemReport } from \"@shared/schema\";\n\n// Additional frontend-specific types\nexport interface RoomWithStats extends Room {\n  activeSession?: CleaningSession;\n  lastProblemReport?: ProblemReport;\n}\n\nexport interface ChecklistProgress {\n  completed: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface DashboardStats {\n  dirty: number;\n  cleaning: number;\n  inspection: number;\n  clean: number;\n  occupied: number;\n}\n","size_bytes":817},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport NavigationHeader from \"@/components/navigation-header\";\nimport RoomCard from \"@/components/room-card\";\nimport ChecklistModal from \"@/components/checklist-modal\";\nimport ProblemReportModal from \"@/components/problem-report-modal\";\nimport TimerWidget from \"@/components/timer-widget\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Room, User, CleaningSession } from \"@/lib/types\";\n\nexport default function Dashboard() {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  \n  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null);\n  const [isChecklistOpen, setIsChecklistOpen] = useState(false);\n  const [isProblemModalOpen, setIsProblemModalOpen] = useState(false);\n  const [activeTimer, setActiveTimer] = useState<CleaningSession | null>(null);\n  const [filter, setFilter] = useState<\"all\" | \"assigned\" | \"floor\">(\"all\");\n\n  // WebSocket connection for real-time updates\n  useWebSocket();\n\n  // Fetch rooms based on user role and filter\n  const { data: rooms = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/rooms\", currentUser?.role === \"manager\" ? null : currentUser?.id],\n    queryFn: async () => {\n      if (!currentUser) return [];\n      const params = new URLSearchParams();\n      if (currentUser.role === \"housekeeper\") {\n        params.append(\"assignedTo\", currentUser.id);\n      }\n      \n      const response = await fetch(`/api/rooms?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch rooms\");\n      return response.json();\n    },\n    enabled: !!currentUser,\n  });\n\n  // Fetch users for assignment (managers only)\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/users\");\n      if (!response.ok) {\n        if (response.status === 403) {\n          // User doesn't have permission to view users list\n          return [];\n        }\n        throw new Error(\"Failed to fetch users\");\n      }\n      return response.json();\n    },\n    enabled: !!currentUser, // Only fetch when currentUser is available\n  });\n\n  // Set current user from auth API\n  const { data: authUser } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Set current user from authenticated user\n  useEffect(() => {\n    if (!currentUser && authUser) {\n      setCurrentUser(authUser as User);\n    }\n  }, [authUser, currentUser]);\n\n  // Calculate statistics\n  const stats = {\n    dirty: rooms.filter((r: Room) => r.status === \"dirty\").length,\n    cleaning: rooms.filter((r: Room) => r.status === \"cleaning\").length,\n    inspection: rooms.filter((r: Room) => r.status === \"inspection\").length,\n    clean: rooms.filter((r: Room) => r.status === \"clean\").length,\n    occupied: rooms.filter((r: Room) => r.status === \"occupied\").length,\n  };\n\n  const handleOpenChecklist = (room: Room) => {\n    setSelectedRoom(room);\n    setIsChecklistOpen(true);\n  };\n\n  const handleOpenProblemReport = (room: Room) => {\n    setSelectedRoom(room);\n    setIsProblemModalOpen(true);\n  };\n\n  const handleTimerUpdate = (session: CleaningSession | null) => {\n    setActiveTimer(session);\n    refetch();\n  };\n\n  if (isLoading || !currentUser) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Carregando dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <NavigationHeader user={currentUser} />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        \n        {/* Dashboard Statistics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-8\">\n          <Card className=\"border shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Sujos</p>\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"stats-dirty\">{stats.dirty}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-exclamation-triangle text-red-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Em Limpeza</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stats-cleaning\">{stats.cleaning}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-yellow-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Inspeção</p>\n                  <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"stats-inspection\">{stats.inspection}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-search text-orange-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Limpos</p>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stats-clean\">{stats.clean}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Ocupados</p>\n                  <p className=\"text-2xl font-bold text-gray-600\" data-testid=\"stats-occupied\">{stats.occupied}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-bed text-gray-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Actions */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant={filter === \"all\" ? \"default\" : \"secondary\"}\n              onClick={() => setFilter(\"all\")}\n              data-testid=\"filter-all\"\n            >\n              Todos os Quartos\n            </Button>\n            <Button\n              variant={filter === \"assigned\" ? \"default\" : \"secondary\"}\n              onClick={() => setFilter(\"assigned\")}\n              data-testid=\"filter-assigned\"\n            >\n              Apenas Atribuídos\n            </Button>\n            <Button\n              variant={filter === \"floor\" ? \"default\" : \"secondary\"}\n              onClick={() => setFilter(\"floor\")}\n              data-testid=\"filter-floor\"\n            >\n              Por Andar\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" data-testid=\"button-filters\">\n              <i className=\"fas fa-filter mr-2\"></i>Filtros\n            </Button>\n            {currentUser?.role === \"manager\" && (\n              <Button data-testid=\"button-new-assignment\">\n                <i className=\"fas fa-plus mr-2\"></i>Nova Atribuição\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Rooms Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {rooms.map((room: Room) => (\n            <RoomCard\n              key={room.id}\n              room={room}\n              currentUser={currentUser}\n              users={users}\n              onOpenChecklist={handleOpenChecklist}\n              onOpenProblemReport={handleOpenProblemReport}\n              onTimerUpdate={handleTimerUpdate}\n            />\n          ))}\n        </div>\n\n        {rooms.length === 0 && (\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-bed text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">Nenhum quarto encontrado</h3>\n            <p className=\"text-muted-foreground\">\n              {currentUser?.role === \"housekeeper\" \n                ? \"Você não tem quartos atribuídos no momento.\"\n                : \"Nenhum quarto está cadastrado no sistema.\"\n              }\n            </p>\n          </div>\n        )}\n      </main>\n\n      {/* Modals */}\n      {isChecklistOpen && selectedRoom && (\n        <ChecklistModal\n          room={selectedRoom}\n          currentUser={currentUser}\n          isOpen={isChecklistOpen}\n          onClose={() => setIsChecklistOpen(false)}\n        />\n      )}\n\n      {isProblemModalOpen && selectedRoom && (\n        <ProblemReportModal\n          room={selectedRoom}\n          currentUser={currentUser}\n          isOpen={isProblemModalOpen}\n          onClose={() => setIsProblemModalOpen(false)}\n        />\n      )}\n\n      {/* Timer Widget */}\n      {activeTimer && (\n        <TimerWidget\n          session={activeTimer}\n          onUpdate={handleTimerUpdate}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10626},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-bold text-primary\">\n            Governança Hoteleira\n          </CardTitle>\n          <CardDescription className=\"text-lg mt-2\">\n            Sistema de gestão de limpeza hoteleira com protocolo \"Limpeza 5 Estrelas\"\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <div className=\"text-center space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Gerencie quartos, monitore limpeza em tempo real e mantenha os mais altos padrões de qualidade.\n            </p>\n            \n            <div className=\"grid grid-cols-1 gap-3 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-green-500\">✓</span>\n                <span>Dashboard em tempo real</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-green-500\">✓</span>\n                <span>Protocolo \"Limpeza 5 Estrelas\"</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-green-500\">✓</span>\n                <span>Cronômetro de limpeza</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-green-500\">✓</span>\n                <span>Relatório de problemas</span>\n              </div>\n            </div>\n          </div>\n\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"w-full py-6 text-lg font-semibold\"\n            data-testid=\"button-login\"\n          >\n            Entrar no Sistema\n          </Button>\n          \n          <p className=\"text-xs text-center text-muted-foreground\">\n            Sistema seguro com autenticação integrada\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2371},"client/src/components/room-status-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Room } from \"@/lib/types\";\n\ninterface RoomStatusModalProps {\n  room: Room;\n  children: React.ReactNode;\n}\n\n// Mapeamento dos status internos para os nomes em português\nconst statusMap = {\n  dirty: \"Ocupado e Sujo\",\n  clean: \"Limpo\", \n  occupied: \"Ocupado Limpo\",\n  cleaning: \"Vazio\",\n  inspection: \"Disponível para o check in\",\n  approved: \"Aprovado\"\n} as const;\n\nconst statusOptions = [\n  { value: \"dirty\", label: \"Ocupado e Sujo\" },\n  { value: \"clean\", label: \"Limpo\" },\n  { value: \"occupied\", label: \"Ocupado Limpo\" },\n  { value: \"cleaning\", label: \"Vazio\" },\n  { value: \"inspection\", label: \"Disponível para o check in\" },\n  { value: \"approved\", label: \"Aprovado\" }\n];\n\nexport default function RoomStatusModal({ room, children }: RoomStatusModalProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState(room.status);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (newStatus: string) => {\n      return apiRequest(\"PATCH\", `/api/rooms/${room.id}/status`, { status: newStatus });\n    },\n    onSuccess: () => {\n      // Invalidate all room queries (including those with user-specific keys)\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      // Also force a refetch on the specific room data\n      queryClient.refetchQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Status atualizado\",\n        description: `Quarto ${room.number} alterado para: ${statusMap[selectedStatus as keyof typeof statusMap]}`,\n      });\n      setOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao atualizar status do quarto\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error updating room status:\", error);\n    },\n  });\n\n  const handleStatusUpdate = () => {\n    if (selectedStatus !== room.status) {\n      updateStatusMutation.mutate(selectedStatus);\n    } else {\n      setOpen(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Alterar Status - Quarto {room.number}</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Status Atual:</label>\n            <p className=\"text-sm text-muted-foreground\">\n              {statusMap[room.status as keyof typeof statusMap]}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Novo Status:</label>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"status-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {statusOptions.map((option) => (\n                  <SelectItem \n                    key={option.value} \n                    value={option.value}\n                    data-testid={`status-option-${option.value}`}\n                  >\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setOpen(false)}\n            data-testid=\"cancel-status-change\"\n          >\n            Cancelar\n          </Button>\n          <Button\n            onClick={handleStatusUpdate}\n            disabled={updateStatusMutation.isPending}\n            data-testid=\"confirm-status-change\"\n          >\n            {updateStatusMutation.isPending ? \"Alterando...\" : \"Confirmar\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4497},"client/src/components/approval-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, X } from \"lucide-react\";\nimport { Room, User } from \"@shared/schema\";\n\ninterface ApprovalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  room: Room;\n  onApprovalComplete: () => void;\n}\n\nexport function ApprovalModal({ isOpen, onClose, room, onApprovalComplete }: ApprovalModalProps) {\n  const { toast } = useToast();\n\n  // Fetch completed checklist for this room\n  const { data: checklistCompletion, isLoading: checklistLoading } = useQuery({\n    queryKey: [\"/api/checklist-completions/room\", room.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/checklist-completions/room/${room.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch checklist\");\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Fetch checklist template\n  const { data: template, isLoading: templateLoading } = useQuery({\n    queryKey: [\"/api/checklist-template\", \"Limpeza 5 Estrelas\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/checklist-template/Limpeza 5 Estrelas\");\n      if (!response.ok) throw new Error(\"Failed to fetch template\");\n      return response.json();\n    },\n    enabled: isOpen && checklistCompletion,\n  });\n\n  // Fetch users for housekeeper/supervisor names\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isOpen && checklistCompletion,\n  });\n\n  const approveRoomMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"PATCH\", `/api/rooms/${room.id}`, {\n        status: \"approved\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Quarto aprovado\",\n        description: `Quarto ${room.number} foi aprovado com sucesso.`,\n      });\n      onApprovalComplete();\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao aprovar o quarto.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStepName = (step: string) => {\n    const stepNames: Record<string, string> = {\n      arrumacao: \"Arrumação\",\n      limpeza: \"Limpeza\",\n      organizacao: \"Organização\",\n      verificacao: \"Verificação\",\n      finalizacao: \"Finalização\"\n    };\n    return stepNames[step] || step;\n  };\n\n  const isLoading = checklistLoading || templateLoading;\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"ml-2\">Carregando checklist...</span>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!checklistCompletion) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Erro</DialogTitle>\n            <DialogDescription>\n              Nenhum checklist finalizado encontrado para o quarto {room.number}.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end\">\n            <Button onClick={onClose}>Fechar</Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const housekeeper = (users as User[]).find((u: User) => u.id === checklistCompletion.housekeeperId);\n  const supervisor = (users as User[]).find((u: User) => u.id === checklistCompletion.supervisorId);\n  const totalItems = template?.items ? Object.values(template.items).flat().length : 0;\n  const completedCount = Object.values(checklistCompletion.completedItems).filter(Boolean).length;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\" data-testid=\"approval-modal\">\n        <DialogHeader className=\"pb-4 border-b\">\n          <DialogTitle className=\"text-2xl font-bold flex items-center\">\n            <CheckCircle className=\"h-6 w-6 text-green-600 mr-2\" />\n            Aprovação - Quarto {room.number}\n          </DialogTitle>\n          <DialogDescription>\n            Revise o checklist concluído antes de aprovar o quarto\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"overflow-y-auto max-h-[calc(90vh-200px)] p-6\">\n          {/* Checklist Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-secondary rounded-lg\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Camareira(o):</p>\n              <p className=\"font-semibold\">{housekeeper?.name || 'N/A'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Supervisor:</p>\n              <p className=\"font-semibold\">{supervisor?.name || 'N/A'}</p>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Concluído em:</p>\n              <p className=\"font-semibold\">\n                {checklistCompletion.completedAt \n                  ? new Date(checklistCompletion.completedAt).toLocaleDateString('pt-BR')\n                  : 'N/A'\n                }\n              </p>\n            </div>\n          </div>\n\n          {/* Progress Summary */}\n          <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Status do Checklist</p>\n                <p className=\"text-lg font-bold text-green-900\">\n                  {completedCount}/{totalItems} itens concluídos\n                </p>\n              </div>\n              <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300\">\n                100% Completo\n              </Badge>\n            </div>\n          </div>\n\n          {/* Checklist Items */}\n          {template?.items && Object.entries(template.items as Record<string, any[]>).map(([step, items]: [string, any[]]) => (\n            <div key={step} className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                {getStepName(step)}\n              </h3>\n              <div className=\"space-y-2\">\n                {items.map((item: any, index: number) => {\n                  const itemKey = `${step}-${index}`;\n                  const isCompleted = checklistCompletion.completedItems[itemKey];\n                  return (\n                    <div key={itemKey} className=\"flex items-center p-3 bg-white border rounded-lg\">\n                      <div className=\"flex-shrink-0 mr-3\">\n                        <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                      </div>\n                      <div className=\"flex-grow\">\n                        <p className=\"font-medium\">{item.title}</p>\n                        {item.description && (\n                          <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                        )}\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">\n                        Concluído\n                      </Badge>\n                    </div>\n                  );\n                })}\n              </div>\n              {step !== Object.keys(template.items)[Object.keys(template.items).length - 1] && (\n                <Separator className=\"mt-4\" />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between pt-4 border-t bg-background\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            data-testid=\"button-cancel-approval\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            Cancelar\n          </Button>\n          <Button\n            className=\"bg-green-600 text-white hover:bg-green-700\"\n            onClick={() => approveRoomMutation.mutate()}\n            disabled={approveRoomMutation.isPending}\n            data-testid=\"button-confirm-approval\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            {approveRoomMutation.isPending ? \"Aprovando...\" : \"Aprovar Quarto\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8890}},"version":1}